import { Request, Response, NextFunction } from 'express';
import { fuzzySearch } from '../helpers';
import { SupplierModel } from '../models/supplier';

const getAll = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const payload = await SupplierModel.find({ isDeleted: false });

		res.status(200).json({
			payload,
			message: 'L·∫•y danh s√°ch th√†nh c√¥ng.',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'L·∫•y danh s√°ch th·∫•t b·∫°i!',
		});
	}
};

const create = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const { name, email, phoneNumber, address } = req.body;

		const newSupplier = new SupplierModel({
			name,
			email,
			phoneNumber,
			address,
		});

		const payload = await newSupplier.save();

		res.status(200).json({
			payload,
			message: 'T·∫°o danh s√°ch th√†nh c√¥ng.',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'T·∫°o danh s√°ch kh√¥ng th√†nh c√¥ng!',
		});
	}
};

type TSupplier = {
	name?: RegExp;
	email?: RegExp;
	address?: RegExp;
	isDeleted?: boolean;
};

const search = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const { name, address, email } = req.query;
		const conditionFind: TSupplier = { isDeleted: false };

		if (typeof name === 'string') conditionFind.name = fuzzySearch(name);
		if (typeof address === 'string')
			conditionFind.address = fuzzySearch(address);
		if (typeof email === 'string') conditionFind.email = fuzzySearch(email);

		console.log('<<== üöÄ conditionFind ==>>', conditionFind);

		const payload = await SupplierModel.find(conditionFind);

		res.status(200).json({
			payload,
			message: 'T√¨m ki·∫øm th√†nh c√¥ng',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'T√¨m ki·∫øm kh√¥ng th√†nh c√¥ng',
		});
	}
};

const getDetail = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const { id } = req.params;

		const payload = await SupplierModel.findById(id);
		// const payload = await SupplierModel.findOne({
		// 	_id: id,
		// 	isDeleted: false,
		// });

		if (!payload) {
			return res.status(400).json({
				message: 'Kh√¥ng t√¨m th·∫•y!',
			});
		}

		if (payload.isDeleted) {
			return res.status(400).json({
				message: 'Nh√† cung c·∫•p ƒë√£ b·ªã x√≥a!',
			});
		}

		return res.status(200).json({
			payload,
			message: 'Xem chi ti·∫øt th√†nh c√¥ng.',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'Xem chi ti·∫øt kh√¥ng th√†nh c√¥ng!',
		});
	}
};

const update = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const { id } = req.params;

		const payload = await SupplierModel.findOneAndUpdate(
			{ _id: id, isDeleted: false },
			{ ...req.body },
			{ new: true }
		);

		if (!payload) {
			return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y!' });
		}

		return res.status(200).json({
			payload,
			message: 'C·∫≠p nh·∫≠p th√†nh c√¥ng.',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'C·∫≠p nh·∫≠p kh√¥ng th√†nh c√¥ng!',
		});
	}
};

const deleteFunc = async (req: Request, res: Response, next: NextFunction) => {
	try {
		const { id } = req.params;

		const payload = await SupplierModel.findOneAndUpdate(
			{ _id: id, isDeleted: false },
			{ isDeleted: true },
			{ new: true }
		);

		if (!payload) {
			return res.status(200).json({
				message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c!',
			});
		}
		return res.status(200).json({
			payload,
			message: 'X√≥a th√†nh c√¥ng.',
		});
	} catch (error) {
		console.log('<<== üöÄ error ==>>', error);
		res.status(400).json({
			error,
			message: 'X√≥a kh√¥ng th√†nh c√¥ng!',
		});
	}
};

export { getAll, create, search, getDetail, update, deleteFunc };
